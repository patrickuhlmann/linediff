plugins {
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "3.1.1"
    id "com.github.spotbugs" version "4.7.0"
    id 'pmd'
    id 'info.solidsoft.pitest' version '1.6.0'
    id 'checkstyle'
    id "net.davidecavestro.gradle.jxr" version "0.2.1"
    id 'com.github.ben-manes.versions'  version '0.38.0' // see dependencyUpdates
    id 'com.palantir.graal' version '0.7.2'
    id "org.owasp.dependencycheck" version "6.1.1"
}

group 'ch.uhlme'
version '2.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter:5.7.1')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.7.1')
    testImplementation('org.hamcrest:hamcrest-library:2.2')
    implementation('com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0')
    implementation('com.google.flogger:flogger:0.5.1')
    implementation('com.google.flogger:flogger-system-backend:0.5.1')
    implementation('com.github.spotbugs:spotbugs-annotations:4.2.1')
}

java {
    withJavadocJar()
    withSourcesJar()
}
jar.dependsOn javadocJar
jar.dependsOn sourcesJar

compileJava   {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'ch.uhlme.Application'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

dependencyCheck {
	failOnError
	failBuildOnCVSS=7
}


/* jacoco configuration */
check.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
jacocoTestReport.mustRunAfter test

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}

sonarqube {
  properties {
    property "sonar.projectKey", "linediff"
    property "sonar.organization", "uhlme-github"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.java.checkstyle.reportPaths", [ "build/reports/checkstyle/main.xml", "build/reports/checkstyle/test.xml" ]
    property "sonar.java.pmd.reportPaths", [ "build/reports/pmd/main.xml", "build/reports/pmd/test.xml" ]
    // property "sonar.java.spotbugs.reportPaths", "build/reports/spotbugs/*.xml"
    property "sonar.junit.reportPaths", "build/test-results/test"
  }
}

spotbugs {
    //noinspection GrFinalVariableAccess
    ignoreFailures = false
}

pmd {
    ignoreFailures = false
}

spotbugsMain {
    reports {
 	// Only one report format is supported. Html is easier to read, so let's use that
    	// (xml is the one that's enabled by default)
    	xml.enabled = false
        html.enabled = true
        
    }
}

spotbugsTest {
    reports {
 	// Only one report format is supported. Html is easier to read, so let's use that
    	// (xml is the one that's enabled by default)
        xml.enabled = false
        html.enabled = true
    }
}

pitest {
    //adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"
    junit5PluginVersion = '0.12'
    avoidCallsTo = [ 'com.google.common.flogger',
                     'java.io.PrintStream',
                     'java.io.BufferedReader',
                     'java.io.InputStream',
                     'java.util.logging',
                     'ch.uhlme.utils.LogUtils']
}

checkstyle {
    toolVersion '8.40'
    maxWarnings = 0
}

graal {
    mainClass 'ch.uhlme.Application'
    outputName 'linediff'
    graalVersion '20.2.0'
    javaVersion '11'
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

check.dependsOn dependencyUpdates
dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }

    gradleReleaseChannel="current"
    checkForGradleUpdate = true
    outputDir = "build/reports"
    reportfileName = "dependencyUpdates"
}
