import com.github.spotbugs.snom.SpotBugsReport

plugins {
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "2.8"
    id "com.github.spotbugs" version "4.0.8"
    id 'pmd'
}

group 'ch.uhlme'
version '1.0.2'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.6.2')
    implementation('com.google.flogger:flogger:0.5.1')
    implementation('com.google.flogger:flogger-system-backend:0.5.1')
    implementation('com.github.spotbugs:spotbugs-annotations:4.0.2')
}

compileJava   {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'ch.uhlme.Application'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

/* jacoco configuration */
check.dependsOn jacocoTestReport
jacocoTestReport.mustRunAfter test

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "patrickuhlmann_linedifference"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

spotbugs {
    //noinspection GrFinalVariableAccess
    ignoreFailures = false
}

pmd {
    ignoreFailures = false
}

spotbugsMain {
    reports(({
        html {
            enabled = true
        }
    } as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>))
}

spotbugsTest {
    reports(({
        html {
            enabled = true
        }
    } as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>))
}